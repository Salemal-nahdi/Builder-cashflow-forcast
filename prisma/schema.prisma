generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 1. Organization - one per deployment
model Organization {
  id             String          @id @default(cuid())
  name           String
  startingBalance Decimal        @default(0)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  
  projects       Project[]
  xeroConnection XeroConnection?
}

// 2. Project - construction projects
model Project {
  id             String    @id @default(cuid())
  organizationId String
  name           String
  contractValue  Decimal
  startDate      DateTime
  endDate        DateTime
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  milestones     Milestone[]
  costs          Cost[]
  xeroMaps       XeroProjectMap[]
  
  @@index([organizationId])
}

// 3. Milestone - payment stages (income)
model Milestone {
  id             String   @id @default(cuid())
  projectId      String
  name           String
  amount         Decimal
  expectedDate   DateTime
  status         String   @default("pending") // pending, invoiced, paid
  xeroInvoiceId  String?  @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  project        Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@index([projectId])
  @@index([expectedDate])
}

// 4. Cost - expenses/supplier claims
model Cost {
  id           String   @id @default(cuid())
  projectId    String
  description  String
  amount       Decimal
  expectedDate DateTime
  vendor       String?
  status       String   @default("pending") // pending, billed, paid
  xeroBillId   String?  @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@index([projectId])
  @@index([expectedDate])
}

// 5. Xero Connection - OAuth tokens
model XeroConnection {
  id             String   @id @default(cuid())
  organizationId String   @unique
  tenantId       String
  accessToken    String
  refreshToken   String
  expiresAt      DateTime
  isActive       Boolean  @default(true)
  lastSyncAt     DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

// 6. Xero Tracking Category (for mapping projects)
model XeroTrackingCategory {
  id             String   @id @default(cuid())
  organizationId String
  xeroId         String
  name           String
  status         String
  createdAt      DateTime @default(now())
  
  options        XeroTrackingOption[]
  
  @@unique([organizationId, xeroId])
}

// 7. Xero Tracking Option (values within categories)
model XeroTrackingOption {
  id         String   @id @default(cuid())
  categoryId String
  xeroId     String
  name       String
  status     String
  createdAt  DateTime @default(now())
  
  category   XeroTrackingCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  projectMaps XeroProjectMap[]
  
  @@unique([categoryId, xeroId])
}

// 8. Xero Project Mapping - link projects to tracking categories
model XeroProjectMap {
  id              String @id @default(cuid())
  projectId       String
  trackingOptionId String
  createdAt       DateTime @default(now())
  
  project         Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  trackingOption  XeroTrackingOption @relation(fields: [trackingOptionId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, trackingOptionId])
}
